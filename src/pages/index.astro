---
import Layout from "../layouts/Layout.astro";
import AppShell from "../components/AppShell.astro";
import Header from "../components/Header.astro";
import ChatComposer from "../components/ChatComposer";
import PageAnimations from "../components/PageAnimations";
import AnimatedText from "../components/AnimatedText";
import { ArrowUp } from "lucide-react";

const suggestions = [
  "Top Universities In Australia",
  "How Apply Course",
  "How To Apply As An International Student",
  "Best Degrees For My Career Goals",
  "Scholarships And Funding Options",
];

const copyItems = [
  "Free Plan",
  "Learn Better. Apply Smarter.",
  "Ask anything about universities, careers, or study options. I'll help you explore and apply.",
];

const buttonItems = [
  "Upgrade Pro Plan",
  "Login",
];
---
<Layout title="StudyNet">
  <AppShell>
    <Header loginText={buttonItems[1]} />

    <section class="center container-max" id="chat-container">
      <div class="hero-header" id="hero-header">
        <div class="plan-pill">{copyItems[0]}</div>
        <div class="hero-title">
          <AnimatedText text={copyItems[1]} className="headline" delay={0.2} client:load />
          <AnimatedText text={copyItems[2]} className="subcopy" delay={0.4} client:load />
        </div>
      </div>
      
      <!-- Chat messages area (hidden initially) -->
      <div class="chat-messages-area" id="chat-messages" style="display: none;"></div>
      
      <div class="composer-wrapper">
        <ChatComposer client:load />
      </div>
      <div class="chips" id="chips-container">
        {suggestions.map((s) => (
          <button class="chip chip-suggestion" data-suggestion={s}>
            <span>{s}</span>
            <span class="chip-icon">
              <ArrowUp width={12} height={12} strokeWidth={2} style={{ color: 'var(--text)' }} />
            </span>
          </button>
        ))}
      </div>
    </section>

    <div class="cta-row" id="cta-row">
      <button class="cta" data-navigate="/pricing">
        <span>{buttonItems[0]}</span>
        <span class="chip-icon">
          <ArrowUp width={16} height={16} strokeWidth={2} style={{ color: 'var(--text)' }} />
        </span>
      </button>
    </div>

    <PageAnimations client:load />
  </AppShell>
</Layout>

<script>
  let hasStartedChat = false;
  let isWaitingForResponse = false;

  function hideHeroContent() {
    const heroHeader = document.getElementById('hero-header');
    const ctaRow = document.getElementById('cta-row');
    const chipsContainer = document.getElementById('chips-container');
    const composerWrapper = document.querySelector('.composer-wrapper') as HTMLElement;
    const chatContainer = document.getElementById('chat-container') as HTMLElement;
    
    if (heroHeader) {
      heroHeader.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
      heroHeader.style.opacity = '0';
      heroHeader.style.transform = 'translateY(-20px)';
      setTimeout(() => {
        heroHeader.style.display = 'none';
      }, 300);
    }
    
    if (ctaRow) {
      ctaRow.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
      ctaRow.style.opacity = '0';
      ctaRow.style.transform = 'translateY(20px)';
      setTimeout(() => {
        ctaRow.style.display = 'none';
      }, 300);
    }

    if (chipsContainer) {
      chipsContainer.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
      chipsContainer.style.opacity = '0';
      chipsContainer.style.transform = 'translateY(20px)';
      setTimeout(() => {
        chipsContainer.style.display = 'none';
      }, 300);
    }

    // Move composer to bottom of main content area with smooth animation
    if (composerWrapper && chatContainer) {
      setTimeout(() => {
        chatContainer.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
        chatContainer.style.justifyContent = 'flex-start';
        chatContainer.style.alignItems = 'stretch';
        composerWrapper.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
        composerWrapper.style.marginTop = 'auto';
      }, 300);
    }
  }

  function showChatMessages() {
    const chatMessages = document.getElementById('chat-messages');
    if (chatMessages) {
      chatMessages.style.display = 'flex';
    }
  }

  function addMessage(content: string, role: 'user' | 'assistant') {
    const chatMessages = document.getElementById('chat-messages');
    if (!chatMessages) return;

    const messageDiv = document.createElement('div');
    messageDiv.className = `chat-message chat-message-${role}`;
    
    const contentDiv = document.createElement('div');
    contentDiv.className = 'chat-message-content';
    contentDiv.textContent = content;
    
    messageDiv.appendChild(contentDiv);
    chatMessages.appendChild(messageDiv);
    
    // Scroll to bottom
    setTimeout(() => {
      messageDiv.scrollIntoView({ behavior: 'smooth' });
    }, 100);
  }

  function addTypingIndicator() {
    const chatMessages = document.getElementById('chat-messages');
    if (!chatMessages) return;

    const messageDiv = document.createElement('div');
    messageDiv.className = 'chat-message chat-message-assistant';
    messageDiv.id = 'typing-indicator';
    
    const contentDiv = document.createElement('div');
    contentDiv.className = 'chat-message-content';
    contentDiv.innerHTML = '<div class="chat-thinking">Thinking...</div>';
    
    messageDiv.appendChild(contentDiv);
    chatMessages.appendChild(messageDiv);
    
    setTimeout(() => {
      messageDiv.scrollIntoView({ behavior: 'smooth' });
    }, 100);
  }

  function removeTypingIndicator() {
    const typingIndicator = document.getElementById('typing-indicator');
    if (typingIndicator) {
      typingIndicator.remove();
    }
  }

  function handleSend(content: string) {
    if (!content.trim() || isWaitingForResponse) return;

    if (!hasStartedChat) {
      hasStartedChat = true;
      hideHeroContent();
      setTimeout(() => {
        showChatMessages();
      }, 300);
    }

    // Add user message
    addMessage(content, 'user');

    // Show typing indicator
    isWaitingForResponse = true;
    addTypingIndicator();

    // Simulate AI response
    setTimeout(() => {
      removeTypingIndicator();
      addMessage('This is a placeholder response. The AI API will be integrated here later.', 'assistant');
      isWaitingForResponse = false;
    }, 1000);
  }

  // Listen for messages from ChatComposer
  document.addEventListener('chat:send', ((e: CustomEvent) => {
    handleSend(e.detail.content);
  }) as EventListener);

  // Handle chip clicks
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    const chip = target.closest('.chip-suggestion') as HTMLElement;
    if (chip) {
      const suggestion = chip.dataset.suggestion;
      if (suggestion) {
        handleSend(suggestion);
      }
    }
  });
</script>
