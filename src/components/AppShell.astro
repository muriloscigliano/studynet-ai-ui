---
// Shared app shell with sidebar
import { Plus, Settings } from "lucide-react";

const copyItems = [
  "New Chat",
  "Chats",
  "Settings",
];
---
<div class="page">
  <div class="shell">
    <!-- Sidebar -->
    <aside class="sidebar">
      <div>
        <div class="logo">
          <img src="https://dummyimage.com/122x36/FFFFFF/000000.png&text=StudyNet" alt="StudyNet" />
        </div>
        <button class="new-chat" data-navigate="/">
          <span class="new-chat-icon">
            <Plus width={16} height={16} strokeWidth={2} />
          </span>
          <span>{copyItems[0]}</span>
        </button>
        <div class="divider"></div>
        <div class="section-title">{copyItems[1]}</div>
        <ul class="chats-list">
          <li class="chat-item">Best nurse degree...</li>
          <li class="chat-item">Sydney universities d...</li>
          <li class="chat-item">Emerging Careers in..</li>
          <li class="chat-item">Search Chat</li>
        </ul>
      </div>
      <div>
        <div class="divider divider-bottom"></div>
        <button class="settings-btn" data-navigate="/settings">
          <Settings width={17} height={17} strokeWidth={2} style={{ color: 'var(--muted)' }} />
          <span>{copyItems[2]}</span>
        </button>
      </div>
    </aside>

    <!-- Main content (swappable) -->
    <main class="main" id="main-content">
      <slot />
    </main>
  </div>
</div>

<script>
  // SPA-style navigation without full page reload
  function setupNavigation() {
    const mainContent = document.getElementById('main-content');
    if (!mainContent) return;

    // Intercept clicks on [data-navigate] elements
    document.addEventListener('click', async (e) => {
      const target = e.target as HTMLElement;
      const navButton = target.closest('[data-navigate]') as HTMLElement;
      
      if (!navButton) return;
      
      e.preventDefault();
      const path = navButton.dataset.navigate;
      if (!path) return;

      // Special handling for New Chat button on home page
      if (window.location.pathname === path && path === '/') {
        // Trigger chat reset event instead of navigation
        document.dispatchEvent(new CustomEvent('chat:reset'));
        return;
      }

      // Check if we're already on this page (other pages)
      if (window.location.pathname === path) {
        console.log('Already on this page, skipping navigation');
        return;
      }

      try {
        // Fetch the new page
        const response = await fetch(path);
        const html = await response.text();
        
        // Parse and extract main content
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const newMain = doc.getElementById('main-content');
        
        if (newMain) {
          // Swap content
          mainContent.innerHTML = newMain.innerHTML;
          
          // Update URL
          history.pushState({ path }, '', path);
          
          // Re-run scripts in new content
          executeScripts(mainContent);
          
          // Update theme toggle button states
          setTimeout(() => {
            if (window.updateThemeToggleButtons) {
              window.updateThemeToggleButtons();
            }
          }, 10);
        }
      } catch (error) {
        console.error('Navigation error:', error);
      }
    });

    // Handle browser back/forward
    window.addEventListener('popstate', async (e) => {
      const path = e.state?.path || location.pathname;
      
      try {
        const response = await fetch(path);
        const html = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const newMain = doc.getElementById('main-content');
        
        if (newMain) {
          mainContent.innerHTML = newMain.innerHTML;
          executeScripts(mainContent);
          
          // Update theme toggle button states
          setTimeout(() => {
            if (window.updateThemeToggleButtons) {
              window.updateThemeToggleButtons();
            }
          }, 10);
        }
      } catch (error) {
        console.error('Popstate error:', error);
      }
    });
  }

  function executeScripts(container: HTMLElement) {
    const scripts = container.querySelectorAll('script');
    scripts.forEach((oldScript) => {
      const newScript = document.createElement('script');
      Array.from(oldScript.attributes).forEach((attr) =>
        newScript.setAttribute(attr.name, attr.value)
      );
      newScript.textContent = oldScript.textContent;
      oldScript.parentNode?.replaceChild(newScript, oldScript);
    });
  }

  // Initialize on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupNavigation);
  } else {
    setupNavigation();
  }

  // Mobile menu toggle
  function setupMobileMenu() {
    const sidebar = document.querySelector('.sidebar');
    const menuBtn = document.getElementById('mobileMenuBtn');
    const page = document.querySelector('.page');
    
    if (!menuBtn || !sidebar || !page) return;

    menuBtn.addEventListener('click', () => {
      sidebar.classList.toggle('mobile-open');
      page.classList.toggle('menu-open');
    });

    // Close menu when clicking outside
    page.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      if (sidebar.classList.contains('mobile-open') && 
          !sidebar.contains(target) && 
          !menuBtn.contains(target)) {
        sidebar.classList.remove('mobile-open');
        page.classList.remove('menu-open');
      }
    });

    // Close menu after navigation
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      if (target.closest('[data-navigate]') && sidebar.classList.contains('mobile-open')) {
        sidebar.classList.remove('mobile-open');
        page.classList.remove('menu-open');
      }
    });
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupMobileMenu);
  } else {
    setupMobileMenu();
  }
</script>

